process.loadEnvFile();
const { Bot, InlineKeyboard } = require("grammy");

const bot = new Bot(process.env.BOT_API_KEY);

bot.api.setMyCommands([
  { command: "start", description: "–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º" },
]);

bot.command("start", async (ctx) => {
  console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start");
  console.log(ctx);

  await ctx.replyWithPhoto("https://flic.kr/p/2r3EtAD");

  const firstName = ctx.from?.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${firstName}!`);

  const keyboard = new InlineKeyboard().text("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", "show_options");
  await ctx.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –≤—Å–µ–≥–æ –Ω–∞ 2 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ <b>–ì–û–¢–û–í–û–ï –î–ò–ó–ê–ô–ù–ï–†–°–ö–û–ï –†–ï–®–ï–ù–ò–ï</b>", {
    reply_markup: keyboard,
    parse_mode: "HTML",
  });
});

bot.callbackQuery("show_options", async (ctx) => {
  console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ callbackQuery: show_options");
  console.log(ctx);

  const optionsKeyboard = new InlineKeyboard()
    .text("–û–¥–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞", "option_1")
    .row()
    .text("–î–≤–µ –∫–æ–º–Ω–∞—Ç—ã", "option_2")
    .row()
    .text("3 –∏ –±–æ–ª–µ–µ", "option_3");

  await ctx.reply("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ?", {
    reply_markup: optionsKeyboard,
  });

  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/option_\d/, async (ctx) => {
  console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ callbackQuery: option");
  console.log(ctx);

  const selectedOption = ctx.match[0];

  const photoUrls = [
    "https://flic.kr/p/2r3EQcs",
    "https://flic.kr/p/2r3EQcc",
    "https://flic.kr/p/2r3EQcx",
    "https://flic.kr/p/2r3EQch"
  ];

  for (const url of photoUrls) {
    await ctx.replyWithPhoto(url);
  }

  const newQuestionKeyboard = new InlineKeyboard()
    .text("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "answer_1")
    .row()
    .text("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "answer_2")
    .row()
    .text("–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", "answer_3")
    .row()
    .text("–õ–æ—Ñ—Ç", "answer_4")
    .row()
    .text("–î—Ä—É–≥–æ–µ", "answer_5");

  await ctx.reply("–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –≤–∞–º –±–ª–∏–∂–µ?", {
    reply_markup: newQuestionKeyboard,
  });

  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/answer_\d/, async (ctx) => {
  console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ callbackQuery: answer");
  console.log(ctx);

  const selectedAnswer = ctx.match[0].replace("answer_", "");

  await ctx.reply('<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã.</b> –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ —Å—Ç–∏–ª—é –æ—Ç –Ω–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram —Å–ª–æ–≤–æ <b>"–°–¢–ò–õ–¨"</b> <a href="https://t.me/lafee_remont">–ù–∞–ø–∏—Å–∞—Ç—å üëá</a>.', {
    parse_mode: "HTML",
  });
});

bot.start();