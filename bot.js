process.loadEnvFile();
const { Bot, InlineKeyboard, InputFile } = require("grammy");
const fs = require("fs");
const path = require("path");

const bot = new Bot(process.env.BOT_API_KEY);

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
const CHANNEL_USERNAME = "@lafee_remont";

bot.api.setMyCommands([
  { command: "start", description: "–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º" },
  { command: "price", description: "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç" },
]);

bot.command("start", async (ctx) => {
  console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start");

  const firstName = ctx.from?.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

  const filePath = path.join(__dirname, "img", "welcome.jpg");
  const photo = new InputFile(filePath);

  const caption = `–ü—Ä–∏–≤–µ—Ç, ${firstName}!\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –≤—Å–µ–≥–æ –Ω–∞ 2 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ <b>–ì–û–¢–û–í–û–ï –î–ò–ó–ê–ô–ù–ï–†–°–ö–û–ï –†–ï–®–ï–ù–ò–ï</b>`;

  const keyboard = new InlineKeyboard().text("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", "show_options");

  await ctx.replyWithPhoto(photo, {
    caption,
    parse_mode: "HTML",
    reply_markup: keyboard,
  });
});

bot.callbackQuery("show_options", async (ctx) => {
  console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ callbackQuery: show_options");

  const optionsKeyboard = new InlineKeyboard()
    .text("–û–¥–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞", "option_1")
    .row()
    .text("–î–≤–µ –∫–æ–º–Ω–∞—Ç—ã", "option_2")
    .row()
    .text("3 –∏ –±–æ–ª–µ–µ", "option_3");

  await ctx.reply("–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ?", {
    reply_markup: optionsKeyboard,
  });

  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/option_\d/, async (ctx) => {
  console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ callbackQuery: option");

  const photoUrls = [
    "https://flic.kr/p/2r3EQcs",
    "https://flic.kr/p/2r3EQcc",
    "https://flic.kr/p/2r3EQcx",
    "https://flic.kr/p/2r3EQch",
  ];

  for (const url of photoUrls) {
    await ctx.replyWithPhoto(url);
  }

  const newQuestionKeyboard = new InlineKeyboard()
    .text("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "answer_1")
    .row()
    .text("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "answer_2")
    .row()
    .text("–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", "answer_3")
    .row()
    .text("–õ–æ—Ñ—Ç", "answer_4")
    .row()
    .text("–î—Ä—É–≥–æ–µ", "answer_5");

  await ctx.reply("–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –≤–∞–º –±–ª–∏–∂–µ?", {
    reply_markup: newQuestionKeyboard,
  });

  await ctx.answerCallbackQuery();
});

bot.callbackQuery(/answer_\d/, async (ctx) => {
  console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ callbackQuery: answer");

  const keyboard = new InlineKeyboard()
  .text("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ", "get_gift");

  await ctx.reply(
    '<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã.</b> –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –æ—Ç –Ω–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª <a href="https://t.me/lafee_remont">–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üëá</a>.',
    {
      parse_mode: "HTML",
      reply_markup: keyboard,
    }
  );

  await ctx.answerCallbackQuery();
});

bot.callbackQuery("get_gift", async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
    const member = await ctx.api.getChatMember(CHANNEL_USERNAME, ctx.from.id);
    const status = member.status;

    if (
      status === "member" ||
      status === "administrator" ||
      status === "creator"
    ) {
      const filePath = path.join(__dirname, "pdf", "demoFile1.pdf");
      const document = new InputFile(filePath, "demoFile1.pdf");
      await ctx.replyWithDocument(document, {
        caption: "üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –ø—Ä–∞–π—Å-–ª–∏—Å—Ç.",
      });
    } else {
      const keyboard = new InlineKeyboard().text(
        "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ",
        "get_gift"
      );
      await ctx.reply(
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.`,
        { reply_markup: keyboard }
      );
    }
    await ctx.answerCallbackQuery();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF:", err);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

bot.command("price", async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
    const member = await ctx.api.getChatMember(CHANNEL_USERNAME, ctx.from.id);
    const status = member.status;

    if (
      status === "member" ||
      status === "administrator" ||
      status === "creator"
    ) {
      const filePath = path.join(__dirname, "price.pdf");
      const document = new InputFile(filePath, "price.pdf");
      await ctx.replyWithDocument(document, {
        caption: "üìÑ –í–æ—Ç –≤–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ!",
      });
    } else {
      const keyboard = new InlineKeyboard().text(
        "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ",
        "get_gift"
      );
      await ctx.reply(
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç.`,
        { reply_markup: keyboard }
      );
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF:", err);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

bot.start();
